name: "Generate terraform docs"
on:
  workflow_call:

# Declare default permissions as read only.
permissions: read-all

jobs:
  get-temp-token:
    if: github.actor != '3ware-release[bot]'
    uses: ./.github/workflows/get-workflow-token.yaml
    secrets: inherit
  find-terraform:
    if: github.actor != '3ware-release[bot]'
    permissions:
      contents: read
    uses: ./.github/workflows/get-terraform-dir.yaml

  terraform-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    # only run this workflow if not triggered by 3ware-release
    # this prevents workflow loop
    if: github.actor != '3ware-release[bot]'
    env:
      WORKING_DIR: ${{ needs.find-terraform.outputs.terraform-dir }}
      TF_DOCS_FILE: README.md
    needs: ["get-temp-token", "find-terraform"]
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          persist-credentials: false

      - name: "Decrypt the installation access token"
        id: decrypt-token
        run: |
          DECRYPTED_TOKEN=$(gpg --decrypt --quiet --batch --passphrase "$KEY" \
          --output - <(echo "${{ needs.get-temp-token.outputs.temp-token }}" \
          | base64 --decode))
          echo "::add-mask::$DECRYPTED_TOKEN"
          echo "temp-token=$DECRYPTED_TOKEN" >> $GITHUB_OUTPUT
        env:
          KEY: ${{ secrets.PGP_SECRET_SIGNING_PASSPHRASE }}

      - name: "Render terraform docs"
        id: terraform-docs
        uses: terraform-docs/gh-actions@f6d59f89a280fa0a3febf55ef68f146784b20ba0 # v1.0.0
        with:
          working-dir: ${{ needs.find-terraform.outputs.terraform-dir }}
          output-file: ${{ env.TF_DOCS_FILE }}
          output-method: inject

      - name: "Set file path env"
        run: echo "FILE_PATH=${{ env.WORKING_DIR }}/${{ env.TF_DOCS_FILE }}" >> $GITHUB_ENV

      # Use the REST API to commit changes, so we get automatic commit signing
      # Only run this job if the file has changed to prevent empty commits
      - name: "Push changes back to PR with signature"
        id: push-with-sig
        if: ${{ steps.terraform-docs.outputs.num_changed != 0 }}
        env:
          GH_TOKEN: ${{ steps.decrypt-token.outputs.temp-token }}
          DESTINATION_BRANCH: ${{ github.event.pull_request.head.ref }}
          FILE_TO_COMMIT: "${{ env.FILE_PATH }}"
        run: |
          export MESSAGE="update ${{ env.TF_DOCS_FILE }} with terraform-docs"
          export SHA=$( git rev-parse $DESTINATION_BRANCH:$FILE_TO_COMMIT )
          export CONTENT=$( base64 -i $FILE_TO_COMMIT )
          gh api --method PUT /repos/:owner/:repo/contents/$FILE_TO_COMMIT \
            --field message="$MESSAGE" \
            --field content="$CONTENT" \
            --field encoding="base64" \
            --field branch="$DESTINATION_BRANCH" \
            --field sha="$SHA"

      - name: "Summary if skipped"
        if: ${{ steps.push-with-sig.conclusion == 'skipped' }}
        run: |
          echo "### Push Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Changes were not made to ${{ env.FILE_PATH }} on this run" >> $GITHUB_STEP_SUMMARY

      - name: "Summary if successful"
        if: ${{ steps.push-with-sig.conclusion == 'success' }}
        env:
          BRANCH: ${{ github.head_ref  }}
        run: |
          echo "### Terraform Docs updated :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $$GITHUB_STEP_SUMMARY
          echo "${{ env.FILE_PATH }} added to $BRANCH" >> $GITHUB_STEP_SUMMARY
          echo "[#${{ github.event.pull_request.number }}](https://github.com/3ware/workflows/pull/${{ github.event.pull_request.number }})" >> $GITHUB_STEP_SUMMARY
